def exploiter(nodes, strategies, root, player = 1, trueinfo = False):
    def recbestresp(node):
        if nodes.Type[node] == 'L':
            return nodes.Payoff_Vector_P1[node][0]
        val = .0
        if nodes.Player[node] != player:
            for idson,son in enumerate(nodes.Direct_Sons[node]):
                action = nodes.Actions[node][idson]
                if nodes.Type[node] == 'C':
                    val += recbestresp(son)*nodes.Actions_Prob[node][idson]
                else:
                    if trueinfo:
                        val += recbestresp(son)*strategies[nodes.Map[node]][action]
                    else:
                        val += recbestresp(son)*strategies[nodes.Abs_Map[node]][action]
            return val

        valsons = []
        for idson,son in enumerate(nodes.Direct_Sons[node]):
            action = nodes.Actions[node][idson]
            valsons.append(recbestresp(son))
        if player == 1:
            valsons2 = [max(v,0) for v in valsons]
            sm = sum(valsons2)
            if sm == 0:
                return max(valsons)
            else:
                return sum([v**2 for v in valsons2])/sm
        else:
            valsons2 = [min(v,0) for v in valsons]
            sm = sum(valsons2)
            if sm == 0:
                return min(valsons)
            else:
                return sum([v**2 for v in valsons2])/sm

    return recbestresp(root)

def exp_ut(nodes, strategies, root, trueinfo = False):

    def exp_ut_recursive(node):
        value = 0.
        if nodes.Type[node] == "L":
            return nodes.Payoff_Vector_P1[node][0]
        for idaction,action in enumerate(nodes.Actions[node]):
            if nodes.Type[node] == 'C':
                value +=  nodes.Actions_Prob[node][idaction] * exp_ut_recursive(nodes.Direct_Sons[node][idaction])
            else:
                if trueinfo:
                    value +=  strategies[nodes.Map[node]][action] * exp_ut_recursive(nodes.Direct_Sons[node][idaction])
                else:
                    value +=  strategies[nodes.Abs_Map[node]][action] * exp_ut_recursive(nodes.Direct_Sons[node][idaction])
        return value

    return exp_ut_recursive(root)
